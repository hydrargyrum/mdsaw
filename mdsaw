#!/usr/bin/env python3
# public domain: see LICENSE file

import argparse
import pathlib
import re
import sys


def to_filename(name, extension):
	name = name.replace('.txt', '')
	name = name.lower()
	name = re.sub(r'[\W.]+', '-', name)
	name += f'.{extension}'
	return name


def decompose(filepath, dirpath, extension='md'):
	text = filepath.read_text()
	matches = re.findall(
		r'^# ([^\n]+)\n'
		r'(.+?)'
		r'(?:\n(?=# )|\Z)',
		text, flags=re.UNICODE | re.DOTALL | re.MULTILINE
	)

	for title, subtext in matches:
		subtext = subtext.rstrip()
		subtext = f'# {title}\n{subtext}\n'

		fn = to_filename(title, extension)
		print('writing', fn, file=sys.stderr)
		subfilepath = dirpath.joinpath(fn)
		subfilepath.write_text(subtext)


def compose(filepath, infiles):
	buf = []
	for subfilepath in infiles:
		print('reading', subfilepath, file=sys.stderr)
		subtext = subfilepath.read_text()
		if subtext.startswith('# '):
			title, _, subtext = subtext.partition('\n')
			title = title[1:].strip()  # remove "#"
		else:
			title = subfilepath.name
		subtext = subtext.rstrip()

		buf.append(f'# {title}\n{subtext}\n')

	if buf:  # don't empty the file
		text = '\n'.join(buf)
		if filepath == pathlib.Path('-'):
			print(text)
		else:
			filepath.write_text(text)


def build_parser():
	parser = argparse.ArgumentParser(
		description='''
Compose/decompose text files with multiple markdown sections

Composition
-----------

Multiple text files from the input directory will be merged into a singe big
output text file, with markdown sections for each of the original separate
files, and titles to split them ("# name of the file").
Alternatively, a list of files to merge can be passed instead of a directory.

Decomposition
-------------

Conversely, if an input text file has markdown headings (for example lines
like "# the title"), it can be decomposed in multiple text files in the output
directory, each corresponding to one of the sections.
For example, one of the files could be "the-title.md" and contain the text
from that section up to the next title.
'''.strip(),
		formatter_class=argparse.RawDescriptionHelpFormatter,
	)

	cmp = parser.add_mutually_exclusive_group(required=True)
	cmp.add_argument(
		'-c', '--compose', '--merge', action='store_true',
		help='Compose multiple text files into a single file',
	)
	cmp.add_argument(
		'-d', '--decompose', '--split', action='store_true',
		help='Decompose a text file with separators into multiple files',
	)

	parser.add_argument(
		'--extension',
		default='md',
		help='Output file extension when decomposing a file',
	)
	parser.add_argument(
		'inpaths', type=pathlib.Path,
		nargs='+',
		help='Input paths. If in composing mode must be an existing '
		'directory path to the files to merge or a list of files '
		'to merge. If in decomposing mode, must be the file path to '
		'decompose.',
	)
	parser.add_argument(
		'outpath', type=pathlib.Path,
		help='Output path. When composing, must be a file path where '
		'to write the merged file. When decomposing, must be an '
		'existing directory path where the resulting files will '
		'be written.',
	)
	return parser


def main():
	parser = build_parser()
	args = parser.parse_args()

	if args.compose:
		if args.outpath.exists() and not args.outpath.is_file():
			parser.error(f'{str(args.outpath)!r} is not a file')

		if len(args.inpaths) == 1 and args.inpaths[0].is_dir():
			infiles = sorted(args.inpaths[0].glob(f'*.{args.extension}'))
		elif all(inpath.is_file() for inpath in args.inpaths):
			infiles = args.inpaths

		compose(args.outpath, infiles)
	elif args.decompose:
		if len(args.inpaths) > 1:
			parser.error('only one input file must be given')
		args.inpath = args.inpaths[0]
		if not args.inpath.is_file():
			parser.error(f'{str(args.inpath)!r} is not a file')

		if not args.outpath.is_dir():
			parser.error(f'{str(args.outpath)!r} is not a directory')

		decompose(args.inpath, args.outpath, extension=args.extension)
	else:
		assert False


if __name__ == '__main__':
	main()
